{
    "name":"Infor LN Constraint",
    "scopeName": "source.lnconstraint",
    "fileTypes":[
        ".lnc"
    ],
    "foldingStartMarker":"(?i:\\b(if|if|else|on case|case|default)\\b)",
    "foldingStopMarker":"(?i:\\b(else|endif|endif|endcase|break|\\s(?=endcase))\\b)",
    "patterns": [
        {"include": "#comments"},
        {"include": "#keywords"},
        {"include": "#numbers"},
        {"include": "#strings"},
        {"include": "#types"},
        {"include": "#operators"},
        {"include": "#variables"},
        {"include": "#functions"},
        {"include": "#boolean-literal"}
    ],
    "repository":{
        "comments":{
            "begin":"(?=\\|)",
            "beginCaptures":{
                "1":{"name":"constant.numeric.decimal.lnconstraint"}
            },
            "end":"(?<!\\s_)$\\n",
            "patterns":[
                {
                    "name":"comment.line.lnconstraint",
                    "match":"\\|.*"
                }
            ]
        },
        "keywords":{
            "patterns":[
                {
                    "name":"keyword.control.conditional.lnconstraint",
                    "match":"(?i:\\b(if|then|else|on case|case|default|\\?|\\:)\\b)"
                },
                {
                    "name":"keyword.control.conditional.end.lnconstraint",
                    "match":"(?i:\\b(endif|endcase|break)\\b)"
                },
                {
                    "name":"keyword.control.flow.lnconstraint",
                    "match":"(?i:\\b(goto|return)\\b)"
                }
            ]
        },
        "numbers":{
            "patterns":[
                {
                    "name":"constant.numeric.decimal.lnconstraint",
                    "match":"(?<!\\w)-?\\d+(\\.\\d+)?"
                }
            ]
        },
        "strings":{
            "patterns":[
                {
                    "name":"string.quoted.double.lnconstraint",
                    "match":"\\\"[^\\n\\r\\\"]*\""
                }
            ]
        },
        "types":{
            "patterns":[
                {
                    "name":"storage.type.lnconstraint",
                    "match":"(\\b|\\s)(string|long|double)(\\b|\\s)"
                }
            ]
        },
        "operators":{
            "patterns":[
                {
                    "name":"keyword.other.operator",
                    "match":"(\\b|\\s)(\\*|\\/|&|\\+|-|=|>|<|<>|>=|<=|is)(\\b|\\s)"
                },
                {
                    "name":"keyword.other.operator",
                    "match":"(\\b|\\s)(and|or|not)(\\b|\\s)"
                }
            ]
        },
        "functions":{
            "patterns":[
                {
                    "name":"support.function",
                    "match":"(\\b|\\s)(\\w+)(?>\\()"
                }
            ]
        },
        "variables":{
            "patterns":[
                {
                    "name":"variable.lnconstraint",
                    "match":"(?<!goto\\s)\\b\\w+\\b(?!(:|\\())"
                }
            ]
        },
        "boolean-literal": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.cs",
                    "match": "(?<!\\.)\\btrue\\b"
                },
                {
                    "name": "constant.language.boolean.false.cs",
                    "match": "(?<!\\.)\\bfalse\\b"
                }
            ]
        }
    }
}
